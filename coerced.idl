typedef unsigned short wchar_t;
typedef void* ADCONNECTION_HANDLE;
typedef int BOOL, * PBOOL, * LPBOOL;
typedef unsigned char BYTE, * PBYTE, * LPBYTE;
typedef BYTE BOOLEAN, * PBOOLEAN;
typedef wchar_t WCHAR, * PWCHAR;
typedef WCHAR* BSTR;
typedef char CHAR, * PCHAR;
typedef double DOUBLE;
typedef unsigned long DWORD, * PDWORD, * LPDWORD;
typedef unsigned int DWORD32;
typedef unsigned __int64 DWORD64, * PDWORD64;
typedef unsigned __int64 ULONGLONG;
typedef ULONGLONG DWORDLONG, * PDWORDLONG;
typedef unsigned long error_status_t;
typedef float FLOAT;
typedef unsigned char UCHAR, * PUCHAR;
typedef short SHORT;

typedef void* HANDLE;
typedef DWORD HCALL;
typedef int INT, * LPINT;
typedef signed char INT8;
typedef signed short INT16;
typedef signed int INT32;
typedef signed __int64 INT64;
typedef void* LDAP_UDP_HANDLE;
typedef const wchar_t* LMCSTR;
typedef WCHAR* LMSTR;
typedef long LONG, * PLONG, * LPLONG;
typedef signed __int64 LONGLONG;
typedef LONG HRESULT;

typedef __int3264 LONG_PTR;
typedef unsigned __int3264 ULONG_PTR;

typedef signed int LONG32;
typedef signed __int64 LONG64, * PLONG64;
typedef const char* LPCSTR;
typedef const void* LPCVOID;
typedef const wchar_t* LPCWSTR;
typedef char* PSTR, * LPSTR;

typedef wchar_t* LPWSTR, * PWSTR;
typedef DWORD NET_API_STATUS;
typedef long NTSTATUS;
typedef [context_handle] void* PCONTEXT_HANDLE;
typedef [ref] PCONTEXT_HANDLE* PPCONTEXT_HANDLE;

typedef unsigned __int64 QWORD;
typedef void* RPC_BINDING_HANDLE;
typedef UCHAR* STRING;

typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned long ULONG, * PULONG;

typedef ULONG_PTR DWORD_PTR;
typedef ULONG_PTR SIZE_T;
typedef unsigned int ULONG32;
typedef unsigned __int64 ULONG64;
typedef wchar_t UNICODE;
typedef unsigned short USHORT;
typedef void VOID, * PVOID, * LPVOID;
typedef unsigned short WORD, * PWORD, * LPWORD;

typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME,
* PFILETIME,
* LPFILETIME;

typedef struct _GUID {
    unsigned long Data1;
    unsigned short Data2;
    unsigned short Data3;
    byte Data4[8];
} GUID,
UUID,
* PGUID;

typedef struct _LARGE_INTEGER {
    signed __int64 QuadPart;
} LARGE_INTEGER, * PLARGE_INTEGER;

typedef struct _EVENT_DESCRIPTOR {
    USHORT    Id;
    UCHAR     Version;
    UCHAR     Channel;
    UCHAR     Level;
    UCHAR     Opcode;
    USHORT    Task;
    ULONGLONG Keyword;
} EVENT_DESCRIPTOR,
* PEVENT_DESCRIPTOR,
* PCEVENT_DESCRIPTOR;

typedef struct _EVENT_HEADER {
    USHORT           Size;
    USHORT           HeaderType;
    USHORT           Flags;
    USHORT           EventProperty;
    ULONG            ThreadId;
    ULONG            ProcessId;
    LARGE_INTEGER    TimeStamp;
    GUID             ProviderId;
    EVENT_DESCRIPTOR EventDescriptor;
    union {
        struct {
            ULONG KernelTime;
            ULONG UserTime;
        };
        ULONG64 ProcessorTime;
    };
    GUID             ActivityId;
} EVENT_HEADER,
* PEVENT_HEADER;

typedef DWORD LCID;

typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID,
* PLUID;

typedef struct _MULTI_SZ {
    wchar_t* Value;
    DWORD nChar;
} MULTI_SZ;

typedef struct _RPC_UNICODE_STRING {
    unsigned short Length;
    unsigned short MaximumLength;
    [size_is(MaximumLength / 2), length_is(Length / 2)]
    WCHAR* Buffer;
} RPC_UNICODE_STRING,
* PRPC_UNICODE_STRING;

typedef struct _SERVER_INFO_100 {
    DWORD sv100_platform_id;
    [string] wchar_t* sv100_name;
} SERVER_INFO_100,
* PSERVER_INFO_100,
* LPSERVER_INFO_100;

typedef struct _SERVER_INFO_101 {
    DWORD sv101_platform_id;
    [string] wchar_t* sv101_name;
    DWORD sv101_version_major;
    DWORD sv101_version_minor;
    DWORD sv101_version_type;
    [string] wchar_t* sv101_comment;
} SERVER_INFO_101,
* PSERVER_INFO_101,
* LPSERVER_INFO_101;

typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME,
* PSYSTEMTIME;

typedef struct _UINT128 {
    UINT64 lower;
    UINT64 upper;
} UINT128,
* PUINT128;

typedef struct _ULARGE_INTEGER {
    unsigned __int64 QuadPart;
} ULARGE_INTEGER, * PULARGE_INTEGER;

typedef struct _RPC_SID_IDENTIFIER_AUTHORITY {
    byte Value[6];
} RPC_SID_IDENTIFIER_AUTHORITY;

typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK* PACCESS_MASK;

typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    ACCESS_MASK Remaining;
    GUID* ObjectType;
} OBJECT_TYPE_LIST,
* POBJECT_TYPE_LIST;

typedef struct _ACE_HEADER {
    UCHAR AceType;
    UCHAR AceFlags;
    USHORT AceSize;
} ACE_HEADER,
* PACE_HEADER;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE,
* PSYSTEM_MANDATORY_LABEL_ACE;

typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY,
* PTOKEN_MANDATORY_POLICY;

typedef struct _MANDATORY_INFORMATION {
    ACCESS_MASK AllowedAccess;
    BOOLEAN WriteAllowed;
    BOOLEAN ReadAllowed;
    BOOLEAN ExecuteAllowed;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
} MANDATORY_INFORMATION,
* PMANDATORY_INFORMATION;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE {
    DWORD Length;
    BYTE OctetString[];
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE,
* PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE;

typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
    DWORD Name;
    WORD ValueType;
    WORD Reserved;
    DWORD Flags;
    DWORD ValueCount;
    union {
        PLONG64 pInt64[];
        PDWORD64 pUint64[];
        PWSTR ppString[];
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_RELATIVE pOctetString[];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1,
* PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;


typedef DWORD SECURITY_INFORMATION, * PSECURITY_INFORMATION;

typedef struct _RPC_SID {
    unsigned char Revision;
    unsigned char SubAuthorityCount;
    RPC_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
    [size_is(SubAuthorityCount)] unsigned long SubAuthority[];
} RPC_SID,
* PRPC_SID,
* PSID;

typedef struct _ACL {
    unsigned char AclRevision;
    unsigned char Sbz1;
    unsigned short AclSize;
    unsigned short AceCount;
    unsigned short Sbz2;
} ACL,
* PACL;

typedef struct _SECURITY_DESCRIPTOR {
    UCHAR Revision;
    UCHAR Sbz1;
    USHORT Control;
    PSID Owner;
    PSID Group;
    PACL Sacl;
    PACL Dacl;
} SECURITY_DESCRIPTOR,
* PSECURITY_DESCRIPTOR;


[
    uuid(c681d488-d850-11d0-8c52-00c04fd90f7e),
    version(1.0),
]
interface efsrpc
{


    typedef [context_handle] void* PEXIMPORT_CONTEXT_HANDLE;

    typedef pipe unsigned char EFS_EXIM_PIPE;

    typedef struct _EFS_RPC_BLOB {
        [range(0, 266240)] DWORD            cbData;
        [size_is(cbData)] unsigned char* bData;
    } EFS_RPC_BLOB,
        * PEFS_RPC_BLOB;

    typedef struct {
        DWORD EfsVersion;
    } EFS_COMPATIBILITY_INFO;

    typedef unsigned int ALG_ID;

    typedef struct _EFS_HASH_BLOB {
        [range(0, 100)] DWORD            cbData;
        [size_is(cbData)] unsigned char* bData;
    } EFS_HASH_BLOB;


    typedef struct _ENCRYPTION_CERTIFICATE_HASH {
        DWORD           cbTotalLength;
        RPC_SID* UserSid;
        EFS_HASH_BLOB* Hash;
        [string] wchar_t* lpDisplayInformation;
    } ENCRYPTION_CERTIFICATE_HASH;


    typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {
        [range(0, 500)] DWORD                          nCert_Hash;
        [size_is(nCert_Hash, )] ENCRYPTION_CERTIFICATE_HASH** Users;
    } ENCRYPTION_CERTIFICATE_HASH_LIST;


    typedef struct _CERTIFICATE_BLOB {
        DWORD                                dwCertEncodingType;
        [range(0, 32768)] DWORD            cbData;
        [size_is(cbData)] unsigned char* bData;
    } EFS_CERTIFICATE_BLOB;


    typedef struct _ENCRYPTION_CERTIFICATE {
        DWORD                   cbTotalLength;
        RPC_SID* UserSid;
        EFS_CERTIFICATE_BLOB* CertBlob;
    } ENCRYPTION_CERTIFICATE;


    typedef struct _ENCRYPTION_CERTIFICATE_LIST {
        [range(0, 500)] DWORD nUsers;
        [size_is(nUsers, )] ENCRYPTION_CERTIFICATE** Users;
    } ENCRYPTION_CERTIFICATE_LIST;


    typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE {
        DWORD                  dwEfsAccessType;
        ENCRYPTION_CERTIFICATE_HASH_LIST* CertificatesAdded;
        ENCRYPTION_CERTIFICATE* EncryptionCertificate;
        EFS_RPC_BLOB* EfsStreamSignature;
    } ENCRYPTED_FILE_METADATA_SIGNATURE;

    typedef struct {
        DWORD dwVersion;
        unsigned long Entropy;
        ALG_ID Algorithm;
        unsigned long KeyLength;
    } EFS_KEY_INFO;

    typedef struct {
        DWORD dwDecryptionError;
        DWORD dwHashOffset;
        DWORD cbHash;
    } EFS_DECRYPTION_STATUS_INFO;

    typedef struct {
        BOOL bHasCurrentKey;
        DWORD dwEncryptionError;
    } EFS_ENCRYPTION_STATUS_INFO;

    typedef struct _ENCRYPTION_PROTECTOR {
        DWORD cbTotalLength;
        RPC_SID* UserSid;
        [string] wchar_t* lpProtectorDescriptor;
    } ENCRYPTION_PROTECTOR, * PENCRYPTION_PROTECTOR;

    typedef struct _ENCRYPTION_PROTECTOR_LIST {
        DWORD nProtectors;
        [size_is(nProtectors)] PENCRYPTION_PROTECTOR* pProtectors;
    } ENCRYPTION_PROTECTOR_LIST, * PENCRYPTION_PROTECTOR_LIST;

    long EfsRpcOpenFileRaw(
        [in]            handle_t                   binding_h,
        [out]           PEXIMPORT_CONTEXT_HANDLE* hContext,
        [in, string]    wchar_t* FileName,
        [in]            long                       Flags
    );

    long EfsRpcReadFileRaw(
        [in]            PEXIMPORT_CONTEXT_HANDLE   hContext,
        [out]           EFS_EXIM_PIPE* EfsOutPipe
    );

    long EfsRpcWriteFileRaw(
        [in]            PEXIMPORT_CONTEXT_HANDLE   hContext,
        [in]            EFS_EXIM_PIPE* EfsInPipe
    );

    void EfsRpcCloseRaw(
        [in, out]       PEXIMPORT_CONTEXT_HANDLE* hContext
    );

    long EfsRpcEncryptFileSrv(
        [in]            handle_t    binding_h,
        [in, string]    wchar_t* FileName
    );

    long EfsRpcDecryptFileSrv(
        [in]            handle_t        binding_h,
        [in, string]    wchar_t* FileName,
        [in]            unsigned long   OpenFlag
    );

    DWORD EfsRpcQueryUsersOnFile(
        [in]            handle_t                        binding_h,
        [in, string]    wchar_t* FileName,
        [out]           ENCRYPTION_CERTIFICATE_HASH_LIST** Users
    );

    DWORD EfsRpcQueryRecoveryAgents(
        [in]            handle_t                            binding_h,
        [in, string]    wchar_t* FileName,
        [out]           ENCRYPTION_CERTIFICATE_HASH_LIST** RecoveryAgents
    );

    DWORD EfsRpcRemoveUsersFromFile(
        [in]            handle_t                            binding_h,
        [in, string]    wchar_t* FileName,
        [in]            ENCRYPTION_CERTIFICATE_HASH_LIST* Users
    );

    DWORD EfsRpcAddUsersToFile(
        [in]         handle_t                      binding_h,
        [in, string] wchar_t* FileName,
        [in]         ENCRYPTION_CERTIFICATE_LIST* EncryptionCertificates
    );

    //local only method
    void Opnum10NotUsedOnWire(void);

    DWORD EfsRpcNotSupported(
        [in]            handle_t        binding_h,
        [in, string]    wchar_t* Reserved1,
        [in, string]    wchar_t* Reserved2,
        [in]            DWORD           dwReserved1,
        [in]            DWORD           dwReserved2,
        [in, unique]    EFS_RPC_BLOB* Reserved,
        [in]            BOOL         bReserved
    );

    DWORD EfsRpcFileKeyInfo(
        [in]            handle_t        binding_h,
        [in, string]    wchar_t* FileName,
        [in]            DWORD           InfoClass,
        [out]           EFS_RPC_BLOB** KeyInfo
    );

    DWORD EfsRpcDuplicateEncryptionInfoFile(
        [in]            handle_t        binding_h,
        [in, string]    wchar_t* SrcFileName,
        [in, string]    wchar_t* DestFileName,
        [in]            DWORD           dwCreationDisposition,
        [in]            DWORD           dwAttributes,
        [in, unique]    EFS_RPC_BLOB* RelativeSD,
        [in]            BOOL         bInheritHandle
    );

    //local only method
    void Opnum14NotUsedOnWire(void);

    DWORD EfsRpcAddUsersToFileEx(
        [in]            handle_t                        binding_h,
        [in]            DWORD                           dwFlags,
        [in, unique]    EFS_RPC_BLOB* Reserved,
        [in, string]    wchar_t* FileName,
        [in]    ENCRYPTION_CERTIFICATE_LIST* EncryptionCertificates
    );

    DWORD EfsRpcFileKeyInfoEx(
        [in]            handle_t        binding_h,
        [in]            DWORD           dwFileKeyInfoFlags,
        [in, unique]    EFS_RPC_BLOB* Reserved,
        [in, string]    wchar_t* FileName,
        [in]            DWORD           InfoClass,
        [out]           EFS_RPC_BLOB** KeyInfo
    );

    //local only method
    void Opnum17NotUsedOnWire(void);

    DWORD EfsRpcGetEncryptedFileMetadata(
        [in]                handle_t        binding_h,
        [in, string, ref]   wchar_t* FileName,
        [out, ref]          EFS_RPC_BLOB** EfsStreamBlob
    );

    DWORD EfsRpcSetEncryptedFileMetadata(
        [in]              handle_t                       binding_h,
        [in, string, ref] wchar_t* FileName,
        [in, unique]      EFS_RPC_BLOB* OldEfsStreamBlob,
        [in, ref]         EFS_RPC_BLOB* NewEfsStreamBlob,
        [in, unique] ENCRYPTED_FILE_METADATA_SIGNATURE* NewEfsSignature
    );

    DWORD EfsRpcFlushEfsCache(
        [in]    handle_t    binding_h
    );

    long EfsRpcEncryptFileExSrv(
        [in] handle_t binding_h,
        [in, string] wchar_t* FileName,
        [in, string, unique] wchar_t* ProtectorDescriptor,
        [in] unsigned long Flags
    );

    DWORD EfsRpcQueryProtectors(
        [in] handle_t binding_h,
        [in, string] wchar_t* FileName,
        [out] PENCRYPTION_PROTECTOR_LIST** ppProtectorList
    );

    //local only method
    void Opnum23NotUsedOnWire(void);

    //local only method
    void Opnum24NotUsedOnWire(void);

    //local only method
    void Opnum25NotUsedOnWire(void);

    //local only method
    void Opnum26NotUsedOnWire(void);

    //local only method
    void Opnum27NotUsedOnWire(void);

    //local only method
    void Opnum28NotUsedOnWire(void);

    //local only method
    void Opnum29NotUsedOnWire(void);

    //local only method
    void Opnum30NotUsedOnWire(void);

    //local only method
    void Opnum31NotUsedOnWire(void);

    //local only method
    void Opnum32NotUsedOnWire(void);

    //local only method
    void Opnum33NotUsedOnWire(void);

    //local only method
    void Opnum34NotUsedOnWire(void);

    //local only method
    void Opnum35NotUsedOnWire(void);

    //local only method
    void Opnum36NotUsedOnWire(void);

    //local only method
    void Opnum37NotUsedOnWire(void);

    //local only method
    void Opnum38NotUsedOnWire(void);

    //local only method
    void Opnum39NotUsedOnWire(void);

    //local only method
    void Opnum40NotUsedOnWire(void);

    //local only method
    void Opnum41NotUsedOnWire(void);

    //local only method
    void Opnum42NotUsedOnWire(void);

    //local only method
    void Opnum43NotUsedOnWire(void);

    //local only method
    void Opnum44NotUsedOnWire(void);
}